{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","serviceWorker.ts","redux/state.tsx","components/Header/Header.tsx","components/Navbar/Navbar.jsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","state","profilePage","posts","id","message","likesCount","newPost","messagesPage","messages","dialogs","name","rerenderEntireTree","console","log","addPost","push","updateNewPostText","newText","Header","className","s","header","src","Navbar","nav","item","to","activeClassName","activeLink","DialogItem","props","path","dialog","Message","Dialogs","dialogElements","map","d","messagesElements","m","dialogsItems","messeges","News","Music","Setting","Post","MyPosts","postsElements","p","postBlock","onChange","e","text","currentTarget","value","onClick","ProfileInfo","descriptionBlock","Profile","App","render","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.2fe62755.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1oOTi\",\"item\":\"Navbar_item__3CE-C\",\"activeLink\":\"Navbar_activeLink__7KY6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3eZTd\",\"dialogsItems\":\"Dialogs_dialogsItems__2huCq\",\"dialog\":\"Dialogs_dialog__2Lw-p\",\"messeges\":\"Dialogs_messeges__1Hoar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3OuJc\",\"posts\":\"MyPosts_posts__3X3de\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3s0iR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3k2Lj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__kCRqa\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPost:string\r\n}\r\nexport type MessagePageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogType>\r\n}\r\nexport type stateType = {\r\n    profilePage: ProfilePageType\r\n    messagesPage: MessagePageType\r\n}\r\nexport type AppType = {\r\n    state: stateType\r\n    addPost:()=>void\r\n    updateNewPostText:(newText:string)=>void\r\n}\r\n\r\n\r\n\r\nlet state = {\r\n    profilePage: {\r\n        posts: [\r\n            {id: 1, message: \"Hi, how are you?\", likesCount: 12},\r\n            {id: 2, message: \"1\", likesCount: 10},\r\n            {id: 1, message: \"Hi, how are you???\", likesCount: 15},\r\n            {id: 2, message: \"1111\", likesCount: 11}\r\n        ],\r\nnewPost:\"\"\r\n    },\r\n    messagesPage: {\r\n        messages: [\r\n            {id: 1, message: \"blablabla\"},\r\n            {id: 2, message: \"blablabla\"}\r\n        ],\r\n        dialogs: [\r\n            {id: 1, name: \"Frai\"},\r\n            {id: 2, name: \"Bender\"}\r\n        ],\r\n\r\n    }\r\n}\r\nlet  rerenderEntireTree=(state:stateType)=>{\r\n    console.log(\"  dfhdfhdfh \")\r\n}\r\nexport let addPost=()=>{\r\n  let newPost:PostsType = {\r\n      id:5,\r\n      message:state.profilePage.newPost,\r\n      likesCount: 0\r\n  }\r\n    state.profilePage.posts.push(newPost)\r\n    state.profilePage.newPost=\"\"\r\n    rerenderEntireTree(state)\r\n}\r\nexport const updateNewPostText=(newText:string) =>{\r\n    state.profilePage.newPost=newText\r\n    rerenderEntireTree(state)\r\n}\r\nexport const subscribe =(observer:any)=>{\r\n    rerenderEntireTree = observer\r\n}\r\nexport default state;","import React from 'react';\r\nimport s from \"./Header.module.css\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://images-na.ssl-images-amazon.com/images/I/71MV0SKtt3L._SX425_.jpg\"/>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from 'react';\r\nimport s from \"./Navbar.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/setting\" activeClassName={s.activeLink}>Setting</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nfunction DialogItem(props: DialogItemPropsType) {\r\n    let path = \"/dialogs/\" + props.id\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem","import React from 'react';\r\nimport s from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessagePropsType = {\r\n\r\n    message: string\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    return <div className={s.dialog}>\r\n        {props.message}\r\n    </div>\r\n}\r\n\r\n\r\nexport default Message","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport {NavLink} from 'react-router-dom';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {DialogType, MessageType} from \"../../redux/state\";\r\n\r\n\r\ntype DialogsType = {\r\n\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\n\r\nfunction Dialogs(props: DialogsType) {\r\n    let dialogElements = props.dialogs.map((d: DialogType) => <DialogItem name={d.name} id={d.id}/>)\r\n    let messagesElements = props.messages.map((m: MessageType) => <Message message={m.message}/>)\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messeges}>\r\n                {messagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport s from \"./News.module.css\"\r\n\r\n\r\nfunction News() {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\nexport default News","import React from 'react';\r\nimport s from \"./Music.module.css\"\r\n\r\n\r\nfunction Music() {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\nexport default Music","import React from 'react';\r\nimport s from \"./Setting.module.css\"\r\n\r\n\r\nfunction Setting() {\r\n    return (\r\n        <div>Setting</div>\r\n    )\r\n}\r\nexport default Setting;","import React from 'react';\r\nimport s from \"./Post.module.css\"\r\ntype PropsType = {\r\n    message : string\r\n    likesCount:number\r\n    id?:number\r\n}\r\nfunction Post(props: PropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://topspiski.com/wp-content/uploads/2018/01/259323-700x438.jpg\"/>\r\n            {props.message}\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Post","import React, {ChangeEvent, RefObject} from 'react';\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from './Post/Post';\r\nimport {PostsType} from \"../../../redux/state\";\r\n\r\n/*export type PostsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}*/\r\ntype MyPostsType = {\r\n    posts: Array<PostsType>\r\n    addPost:()=>void\r\n    newPost:string\r\n    updateNewPostText:(newText:string)=>void\r\n}\r\n\r\nfunction MyPosts(props: MyPostsType) {\r\n\r\n    let postsElements = props.posts.map((p: PostsType) => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let addPost = () => {\r\n\r\n        props.addPost()\r\n         }\r\n\r\n    const onPostChange =(e:ChangeEvent<HTMLTextAreaElement>)=>{\r\n        let text = e.currentTarget.value\r\n        props.updateNewPostText(text)\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My Posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea onChange={onPostChange} value={props.newPost}/>\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>ADD POST</button>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport s from \"./ProfileInfo.module.css\"\r\n\r\n\r\nfunction ProfileInfo() {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <img\r\n                    src=\"https://images.ctfassets.net/mivicpf5zews/3HvVSAnvVSg6sisG2kG6m4/bb6ba99e22f7b4f3d08b4014513284c1/Manchester-United-Old-Trafford_Hero_1200x600px.jpg?w=1000\"/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from \"./Profile.module.css\"\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {PostsType} from \"../../redux/state\";\r\n\r\ntype ProfileType={\r\n    posts:Array<PostsType>\r\n    addPost:()=>void\r\n    newPost:string\r\n    updateNewPostText:(newText:string)=>void\r\n}\r\n\r\n\r\nfunction Profile(props:ProfileType) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo />\r\n            <MyPosts posts={props.posts}\r\n                     addPost={props.addPost}\r\n                     newPost={props.newPost}\r\n                     updateNewPostText={props.updateNewPostText}/>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Dialogs from './components/Dialogs/Dialogs';\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Setting from './components/Setting/Setting';\r\nimport Profile from \"./components/Profile/Profile\";\r\nimport {AppType} from \"./redux/state\";\r\n\r\n\r\nfunction App(props: AppType) {\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App-wrapper\">\r\n                <Header/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/dialogs' render={() => <Dialogs dialogs={props.state.messagesPage.dialogs}\r\n                                                                  messages={props.state.messagesPage.messages}/>}/>\r\n                    <Route path='/profile' render={() => <Profile posts={props.state.profilePage.posts}\r\n                                                                  addPost={props.addPost}\r\n                                                                  newPost={props.state.profilePage.newPost}\r\n                                                                  updateNewPostText={props.updateNewPostText}/>}\r\n                    />\r\n\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/setting' render={() => <Setting/>}/>\r\n\r\n                </div>\r\n            </div>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import * as serviceWorker from './serviceWorker';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport state, {addPost, stateType, subscribe, updateNewPostText} from \"./redux/state\"\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\n let rerenderEntireTree = (state:stateType) => {\r\n    ReactDOM.render(\r\n        <BrowserRouter>\r\n            <App state={state} addPost={addPost} updateNewPostText={updateNewPostText}/>\r\n        </BrowserRouter>, document.getElementById('root'));\r\n}\r\n\r\n\r\n\r\nrerenderEntireTree(state)\r\nsubscribe(rerenderEntireTree)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}